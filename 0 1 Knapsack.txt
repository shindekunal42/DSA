#include <bits/stdc++.h> 
//brute approach
  int solve(vector<int>& weight,vector<int>& value,int index,int capacity){
	  	//base case
		if(index==0){
			if(weight[0]<=capacity){
				return value[0];

			}
			else{
				return 0;
			}
		}
	int include=0;
	if(weight[index]<=capacity)
    include=value[index]+solve(weight,value,index-1,capacity-weight[index]);
	int exclude=0+solve(weight,value,index-1,capacity);
	int ans=max(exclude,include);
	return ans;

  }
  //Optimal Approach
  int solvemem(vector<int>& weight,vector<int>& value,int index,int capacity,vector<vector<int>>& dp){
	  	//base case
		if(index==0){
			if(weight[0]<=capacity){
				return value[0];

			}
			else{
				return 0;
			}
		}
		if(dp[index][capacity]!=-1)
		return dp[index][capacity];
	int include=0;

	if(weight[index]<=capacity)

    include=value[index]+solvemem(weight,value,index-1,capacity-weight[index],dp);

	int exclude=0+solvemem(weight,value,index-1,capacity,dp);

	dp[index][capacity]=max(exclude,include);
	return dp[index][capacity];

  }

int knapsack(vector<int> weight, vector<int> value, int n, int maxWeight) 
{
//	return solve(weight, value, n - 1, maxWeight);
   vector<vector<int>>dp(n,vector<int>(maxWeight+1,-1));
   return solvemem(weight,value,n-1,maxWeight,dp);
}